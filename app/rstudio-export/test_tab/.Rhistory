licence()
library(tidyverse)
install.packages((tidyverse))
install.packages(tidyverse)
install.packages('tidyverse)
q
install.packages('tidyverse')
library(tidyverse)
clear
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
source('~/Dropbox/Plotting/test.R', echo=TRUE)
system("python3 --v")
system("python3 --version")
system("pip3")
system("pip3 install python-igraph")
install.packages('t
]\
""
system("python3 test.py")
setwd("~/Downloads/rstudio-export")
system("python3 test.py")
system("g++ --version")
system("python3 final_compute_A.py")
system("pip3 install networkx")
system("pip3 install networkx --user")
system("pip install --upgrade pip")
system("pip3 install --upgrade pip --user")
system("python3 final_compute_A.py")
system("python3 final_compute_A.py")
print("Hi")
system("python3 final_compute_A.py")
system("python3 final_compute_A.py")
system("python3 final_compute_A.py")
shiny::runApp()
runApp()
system("ls -la")
system("python3 final_compute_A.py")
system("python3 network_generator")
system("python3 network_generator.py")
system("python3 network_generator.py")
system("tr '\n' , < b.csv > b.txt")
system("tr '\n' , < ./data/b.csv > ./data/b.txt")
system("python3 network_generator.py")
system("tr '\n' , < ./data/b.csv > ./data/b.txt")
system("awk '{print $2}' ./data/g.csv > ./data/_xp.txt")
system("cut -c-8 ./data/xp.txt > ./data/__xp.txt")
system("tr '\n' , < ./data/__xp.txt > ./data/xp.txt")
system("cut -c-8 ./data/xp.txt > ./data/__xp.txt")
system("tr '\n' , < ./data/__xp.txt > ./data/xp.txt")
system("python3 network_generator.py")
system("tr '\n' , < ./data/b.csv > ./data/b.txt")
system("awk '{print $2}' ./data/g.csv > ./data/_xp.txt")
system("cut -c-8 ./data/xp.txt > ./data/__xp.txt")
system("tr '\n' , < ./data/__xp.txt > ./data/xp.txt")
system("python3 network_generator.py")
system("tr '\n' , < ./data/b.csv > ./data/b.txt")
system("awk '{print $2}' ./data/g.csv > ./data/_xp.txt")
system("cut -c-8 ./data/xp.txt > ./data/__xp.txt")
system("tr '\n' , < ./data/__xp.txt > ./data/xp.txt")
system("python3 network_generator.py")
system("tr '\n' , < ./data/b.csv > ./data/b.txt")
system("awk '{print $2}' ./data/g.csv > ./data/_xp.txt")
system("cut -c-8 ./data/_xp.txt > ./data/__xp.txt")
system("tr '\n' , < ./data/__xp.txt > ./data/xp.txt")
runApp()
system("g++ -o direct ./SR/main.cpp")
system("./SR/.direct -f ./data/ -o output.txt")
system("./SR/.direct -f ./data/ -o output.txt")
system("pwd")
system("ls")
system(".direct -f ./data/ -o output.txt")
system("./direct -f ./data/ -o output.txt")
system("python3 network_generator.py")
system("tr '\n' , < ./data/b.csv > ./data/b.txt")
system("awk '{print $2}' ./data/g.csv > ./data/_xp.txt")
system("cut -c-8 ./data/_xp.txt > ./data/__xp.txt")
system("tr '\n' , < ./data/__xp.txt > ./data/xp.txt")
system("cp a.csv a.txt")
system("cp ./data/a.csv ./data/a.txt")
system(".direct -f ./data/ -o output.txt")
system("./direct -f ./data/ -o output.txt")
system("g++ -o direct ./SR/main.cpp")
system("g++ -o direct ./SR/main_dynamic.cpp")
system("g++ -o Ddirect ./SR/main_dynamic.cpp")
system("./Ddirect -f ./data/ -o output1.txt")
runApp()
library(shiny)
library(shiny)
library(plotly)
library(igraph)
library(plotly)
runApp()
setwd("~/git_it/demo/app/rstudio-export/test_tab")
runApp()
runApp('~/git_it/demo/app/rstudio-export')
setwd("~/git_it/demo/app/rstudio-export")
runApp()
setwd("~/git_it/demo/app/rstudio-export")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
file_reader <- read.csv(file = "./data/output.txt", header = FALSE)
View(file_reader)
View(file_reader)
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
transpose_table <- melt(file_reader)
View(transpose_table)
transpose_step1 <- melt(file_reader)
transpose_step1 <- melt(file_reader)
transpose_table <- transpose_step1$value
transpose_table
transpose_table <- as.dataframe(transpose_step1$value)
transpose_table <- as.data.frame(transpose_step1$value)
View(file_reader)
View(transpose_step1)
View(transpose_table)
colname(transpose_table) <- "Traffic"
file_reader <- read.csv(file = "edges.txt", header = FALSE)
transpose_step1 <- melt(file_reader)
transpose_table <- as.data.frame(transpose_step1$value)
colname(transpose_table) <- "Traffic"
colnames(transpose_table) <- c("Traffic")
transpose_table$col2 <- cbind(c(1:length(transpose_table$Traffic)))
file_reader <- read.csv(file = "edges.txt", header = FALSE)
View(file_reader)
file_reader <- read.csv(file = "./data/output.txt", header = FALSE)
transpose_step1 <- melt(file_reader)
transpose_table <- as.data.frame(transpose_step1$value)
colnames(transpose_table) <- c("Traffic")
transpose_table$col2 <- cbind(c(1:length(transpose_table$Traffic)))
install.packages("kableExtra")
runApp()
runApp()
datatable(transpose_table, filter = 'top', options = list(pageLength = 5))
transpose_step1 <- melt(file_reader)
transpose_table <- (transpose_step1$value)
colnames(transpose_table) <- c("Traffic")
runApp()
runApp()
install.packages("Cairo")
runApp()
runApp()
runApp()
setwd("~/git_it/demo/app/rstudio-export")
runApp()
runApp()
runApp()
runApp('interactive_plot.R')
runApp()
runApp()
runApp('interactive_plot.R')
runApp()
runApp()
runApp()
runApp()
runApp('interactive_plot.R')
runApp('Interactive_test')
runApp()
setwd("~/git_it/demo/app/rstudio-export")
runApp()
runApp()
runApp()
mtcars2 <- mtcars[, c("mpg", "cyl", "disp", "hp", "wt", "am", "gear")]
ggplot(mtcars2, aes(wt, mpg)) + geom_point()
# Because it's a ggplot2, we don't need to supply xvar or yvar; if this
# were a base graphics plot, we'd need those.
nearPoints(mtcars2, input$plot1_click, addDist = TRUE)
nearPoints(mtcars2)
nearPoints(mtcars2,xvar = 2,yvar = 3)
runApp()
setwd("~/git_it/demo/app/rstudio-export/test_tab")
runApp()
setwd("~/git_it/demo/app/rstudio-export/Interactive_test")
runApp()
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp()
runApp('test.R')
runApp('test.R')
runApp('~/git_it/demo/app/rstudio-export')
runApp()
runApp()
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp()
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
runApp('~/git_it/demo/app/rstudio-export')
setwd("~/git_it/demo/app/rstudio-export/Interactive_test")
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/git_it/demo/app/rstudio-export")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/git_it/demo/app/rstudio-export/Interactive_test")
runApp('test.R')
runApp()
runApp()
setwd("~/git_it/demo/app/rstudio-export")
runApp()
runApp()
runApp()
setwd("~/git_it/demo/app/rstudio-export")
runApp()
runApp()
runApp('Interactive_test')
shiny  --vesrion
shiny  --vesrion
sessionInfo()
?numericInput
sliderInput("priceInput", "Price", min = 0, max = 100,
value = c(25, 40), pre = "$")
radioButtons("typeInput", "Product type",
choices = c("BEER", "REFRESHMENT", "SPIRITS", "WINE"),
selected = "WINE")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('Interactive_test')
runApp('Interactive_test')
runApp('Interactive_test')
runApp()
runApp('Interactive_test')
runApp()
runApp('Interactive_test')
runApp('Interactive_test')
runApp('Interactive_test')
runApp('Interactive_test')
runApp()
runApp()
runApp('Interactive_test')
runApp()
runApp()
runApp('Interactive_test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(input$plot1_brush)
runApp()
runApp()
runApp()
runApp()
install.packages("logging")
install.packages("shinyjs")
runApp()
runApp()
shinyApp(
shinyUI(
fluidPage(
mainPanel(
tabsetPanel(
tabPanel("Summary", dataTableOutput("dis")),
tabPanel("Plot",
# fluidRow(...)
plotOutput("plot1"),
plotOutput("plot2")
)
)
)
)
),
shinyServer(function(input, output) {
output$plot1 <- renderPlot({
plot(1:10, 1:10)
})
output$plot2 <- renderPlot({
plot(1:10 ,10:1)
})
output$dis <- renderDataTable({})
})
)
runApp()
runApp()
runApp()
runApp('Interactive_test/Check_fluidPage')
runApp('Interactive_test/Check_fluidPage')
setwd("~/git_it/demo/app/rstudio-export/test_tab")
runApp('~/git_it/demo/app/rstudio-export/Interactive_test/Check_fluidPage')
runApp('~/git_it/demo/app/rstudio-export/Interactive_test/Check_fluidPage')
runApp('~/git_it/demo/app/rstudio-export/Interactive_test/Check_fluidPage')
# # Actual Code to our algorithm main
# # Complile the codes
# system("g++ -o direct ./SR/main.cpp")
# system("g++ -o Ddirect ./SR/main_dynamic.cpp")
#
# # Execution Commands
# system("./direct -f ./data/ -o output.txt")
# system("./Ddirect -f ./data/ -o output.txt")
#
# f <- read.csv(file = "edges_with_index_1.csv", header = FALSE)
f <- read.csv(file = "edges.txt", header = FALSE)
edges <- c()
print(dim(f)[1])
for (e in 1:dim(f)[1]){
edges <- append(edges, c(f[e, 1], f[e, 2]))
}
length(edges)
# G <- make_graph(edges)
# G <- graph_from_edgelist(as.matrix(f),  directed = TRUE)
G = graph.data.frame(f, directed=TRUE, vertices=NULL)
net = G
lines_df_x <- c()
lines_df_y <- c()
lines_df_z <- c()
l = layout_on_sphere(net)
list_data <- list(c(V(G)$name))
for (i in 1:(length(f$V1))){
p1 <- (f[i, 1])
p2 <- (f[i, 2])
p1 <- match(p1, list_data[[1]])
p2 <- match(p2, list_data[[1]])
x1 <-  (l[p1,1])
y1 <-  (l[p1,2])
z1 <-  (l[p1,3])
x2 <- (l[p2,1])
y2 <- (l[p2,2])
z2 <- (l[p2,3])
lines_df_x <- c(lines_df_x, x1, x2, NA)
lines_df_y <- c(lines_df_y,y1, y2, NA)
lines_df_z <- c(lines_df_z,z1, z2, NA)
}
output$distPlot <- renderPlotly(plot_ly(as.data.frame(l), x=l[,1], y = l[,2], z = l[,3], type = 'scatter3d' ) %>%
add_paths(x=lines_df_x,y=lines_df_y,z=lines_df_z))
runApp('~/git_it/demo/app/rstudio-export/Interactive_test/Check_fluidPage')
setwd("~/git_it/demo/app/rstudio-export/test_tab")
runApp('~/git_it/demo/app/rstudio-export/Interactive_test/Check_fluidPage')
